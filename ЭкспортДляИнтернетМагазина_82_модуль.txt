//2011-10-23

Перем КаталогИзображений;
Перем КаталогИзображенийВыбран;
Перем ОбъектПреобразованияКартинки;
Перем ОбъектПреобразованияКартинкиСоздан;
Перем КаталогУменьшенныхИзображенийСоздан;
Перем МожноВыгружатьУменьшенные;
Перем ПутьККаталогуУменьшенных;
Перем НомерПослДобавленного;

Процедура ПриОткрытии()
	КаталогИзображений = "C:\";
 	КаталогИзображенийВыбран = ЛОЖЬ;
 	ОбъектПреобразованияКартинки = Неопределено;
 	ОбъектПреобразованияКартинкиСоздан = Ложь;
 	КаталогУменьшенныхИзображенийСоздан = Ложь;
 	МожноВыгружатьУменьшенные = Ложь;
 	ПутьККаталогуУменьшенных = "";
	НомерПослДобавленного = 0;
	
	ЭлементыФормы.Опт.Значение = Истина;
	ЭлементыФормы.Розница.Значение = Истина;
	ЭлементыФормы.НТТ.Значение = Истина;
	ЭлементыФормы.Резерв.Значение = Истина;
    ЭлементыФормы.Передача.Значение = Истина;
	ЭлементыФормы.Дата.Значение = ТекущаяДата();
	ЭлементыФормы.FTPСервер.Значение = "magazinu-459.1gb.ru";//"85.175.91.142";
	ЭлементыФормы.FTPПорт.Значение = 21;
	ЭлементыФормы.FTPЛогин.Значение = "w_magazinu-459_a49de6ab";//"vhostmagazin";
	ЭлементыФормы.FTPПароль.Значение = "3765acc9";//"theylfdfifhs,f";
	ЭлементыФормы.FTPПуть.Значение = "/http/components/com_virtuemart/shop_image/product";
	///http/components/com_virtuemart/shop_image/product/resized папка с маленькими картинками

	ОбновитьФормулуОстатка();
КонецПроцедуры

Процедура ОбновитьФормулуОстатка()
	Формула = "";
	Если ЭлементыФормы.Опт.Значение = Истина Тогда Формула = Формула + "Остаток на оптовых складах" КонецЕсли;
	Если Формула <> "" И ЭлементыФормы.Розница.Значение = Истина Тогда Формула = Формула + " + " КонецЕсли;
	Если ЭлементыФормы.Розница.Значение = Истина Тогда Формула = Формула + "Остаток на розничных складах" КонецЕсли;
	Если Формула <> "" И ЭлементыФормы.НТТ.Значение = Истина Тогда Формула = Формула + " + " КонецЕсли;
	Если ЭлементыФормы.НТТ.Значение = Истина Тогда Формула = Формула + "Остаток в НТТ " КонецЕсли;
    Если ЭлементыФормы.Резерв.Значение = Истина Тогда Формула = Формула + " - Товара в резерве" КонецЕсли;
	Если ЭлементыФормы.Передача.Значение = Истина Тогда Формула = Формула + " - Товара к передаче" КонецЕсли;
	Если Формула <> "" Тогда 
		ЭлементыФормы.ФормулаОстатокНадпись.Заголовок = "Количество номенклатуры = " + Формула;
	Иначе
		ЭлементыФормы.ФормулаОстатокНадпись.Заголовок = "Выберите раздел учета остатков номенклатуры "
	КонецЕсли;
КонецПроцедуры

Процедура СкладПриИзменении(Элемент)
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		ЭлементыФормы.Опт.Значение = Истина;
		ЭлементыФормы.Опт.Доступность = Ложь;
		ЭлементыФормы.Розница.Значение = Ложь;
		ЭлементыФормы.Розница.Доступность = Ложь;
		ЭлементыФормы.НТТ.Значение = Ложь;
		ЭлементыФормы.НТТ.Доступность = Ложь;
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ЭлементыФормы.Опт.Значение = Ложь;
		ЭлементыФормы.Опт.Доступность = Ложь;
		ЭлементыФормы.Розница.Значение = Истина;
		ЭлементыФормы.Розница.Доступность = Ложь;
		ЭлементыФормы.НТТ.Значение = Ложь;
		ЭлементыФормы.НТТ.Доступность = Ложь;
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ЭлементыФормы.Опт.Значение = Ложь;
		ЭлементыФормы.Опт.Доступность = Ложь;
		ЭлементыФормы.Розница.Значение = Ложь;
		ЭлементыФормы.Розница.Доступность = Ложь;
		ЭлементыФормы.НТТ.Значение = Истина;
		ЭлементыФормы.НТТ.Доступность = Ложь;
    ИначеЕсли ЗначениеЗаполнено(Склад) = Ложь Тогда
		ЭлементыФормы.Опт.Значение = Истина;
		ЭлементыФормы.Опт.Доступность = Истина;
		ЭлементыФормы.Розница.Значение = Истина;
		ЭлементыФормы.Розница.Доступность = Истина;
		ЭлементыФормы.НТТ.Значение = Истина;
		ЭлементыФормы.НТТ.Доступность = Истина;
    КонецЕсли;
	
	ОбновитьФормулуОстатка();
КонецПроцедуры

Процедура ТабличноеПолеТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ТабличноеПолеТовары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Артикул = СтрокаТабличнойЧасти.Номенклатура.Артикул;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения =  СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.ВидНоменклатуры = СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа  = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
	СтрокаТабличнойЧасти.Родитель         = СтрокаТабличнойЧасти.Номенклатура.Родитель;
	СтрокаТабличнойЧасти.ТипНоменклатуры  = СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры.ТипНоменклатуры;
КонецПроцедуры

Процедура КоманднаяПанельТоварыОчиститьТаблицу(Кнопка)
	Если Товары.Количество() > 0 Тогда
		ТекстВопроса = "Вы уверены, что хотите удалить все строки из таблицы?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Товары.Очистить();
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьВФайл(Кнопка)
	ЕстьПустыеСтроки = Ложь;
	ПропуститьСтроки = Ложь;
	Для каждого Стр Из Товары Цикл
		Если Стр.Количество = 0 Или Стр.Цена = 0 Тогда
			ЕстьПустыеСтроки = Истина;
			Сообщить("В строке № " + Стр.НомерСтроки + " для номенклатуры " + Стр.Номенклатура + " не заполнено количество и/или цена. Выгрузка в файл не возможна");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.ВидНоменклатуры) Тогда
			Сообщить("В строке № " + Стр.НомерСтроки + " для номенклатуры " + Стр.Номенклатура + " не заполнен Вид номенклатуры. При выгрузке ему будет присвоено значение 'Товар'");
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПустыеСтроки = Истина Тогда
		Ответ = Вопрос("Присутствуют строки с пустым количеством или ценой. Их выгрузка невозможна. Пропустить данные строки?",РежимДиалогаВопрос.ОКОтмена, ,КодВозвратаДиалога.ОК);
		Если Ответ = КодВозвратаДиалога.ОК Тогда 
			ПропуститьСтроки = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Товары.Количество() = 0 Тогда
		Вопрос("Не выбрано ни одной номенклатуры. Заполните табличную часть.", РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
	
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
	Исключение
		Сообщить(ОписаниеОшибки() + " Возможно программа Exсel не установлена на данном компьютере!");
		Возврат;
	КонецПопытки;
	Книга=Эксель.WorkBooks.Add();
	Лист = Книга.WorkSheets(1);
	
	Лист.Columns(1).ColumnWidth = 15;
	Лист.Columns(2).ColumnWidth = 50;
	Лист.Columns(3).ColumnWidth = 10;
	Лист.Columns(4).ColumnWidth = 15;
	Лист.Columns(5).ColumnWidth = 15;
	Лист.Columns(6).ColumnWidth = 15;
	Лист.Columns(7).ColumnWidth = 20;
	Лист.Columns(8).ColumnWidth = 20;
	Лист.Columns(9).ColumnWidth = 20;
	Лист.Columns(10).ColumnWidth = 60;
	Лист.Columns(11).ColumnWidth = 15;
	
	Лист.Cells(1, 1).Value = "Дата выгрузки:";
	Лист.Cells(2, 1).Value = "Артикул";
	Лист.Cells(2, 2).Value = "Наименование";
    Лист.Cells(2, 3).Value = "Ед. изм.";
	Лист.Cells(2, 4).Value = "Цена";
	Лист.Cells(2, 5).Value = "Количество";
	Лист.Cells(2, 6).Value = "Характеристика номенклатуры";
	Лист.Cells(2, 7).Value = "Номенклатурная группа";
    Лист.Cells(2, 8).Value = "Папка";
	Лист.Cells(2, 9).Value = "Вид номенклатуры";
    Лист.Cells(2, 10).Value = "Полное наименование";
	Лист.Cells(2, 11).Value = "Тип номенклатуры";
	Лист.Cells(2, 12).Value = "Свойства характеристик";
	
	Лист.Cells(1,2).Value= ДатаРасчетов;
	НомерСтроки = 2;
	Для Каждого Стр Из Товары Цикл
		Если НЕ (Стр.Количество = 0 Или Стр.Цена = 0) Тогда
			НомерСтроки = НомерСтроки+1;
			Лист.Cells(НомерСтроки,1).Value= Строка(Стр.Артикул);
			Лист.Cells(НомерСтроки,2).Value= Строка(Стр.Номенклатура);
			Лист.Cells(НомерСтроки,3).Value= Строка(Стр.ЕдиницаИзмерения);
			Лист.Cells(НомерСтроки,4).Value= Стр.Цена;
			Лист.Cells(НомерСтроки,5).Value= Стр.Количество;
			Лист.Cells(НомерСтроки,6).Value= Строка(Стр.ХарактеристикаНоменклатуры);
			Лист.Cells(НомерСтроки,7).Value= Строка(Стр.НоменклатурнаяГруппа);
			Лист.Cells(НомерСтроки,8).Value= Строка(Стр.Родитель);
			Лист.Cells(НомерСтроки,9).Value= Строка(Стр.ВидНоменклатуры);
			Лист.Cells(НомерСтроки,10).Value= Строка(Стр.Номенклатура.НаименованиеПолное);
			Лист.Cells(НомерСтроки,11).Value= Строка(Стр.ТипНоменклатуры);

			Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				Запрос = Новый Запрос; 
				Запрос.УстановитьПараметр("Объект", Стр.ХарактеристикаНоменклатуры); 
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Свойство  		КАК Свойство,
				|	ЗначенияСвойствОбъектов.Значение  		КАК ЗначениеСвойства
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Объект = &Объект";
				Выборка = Запрос.Выполнить().Выбрать();   	
				
				НомерСтолбца = 12;
				Пока Выборка.Следующий() Цикл
                	Лист.Cells(НомерСтроки,НомерСтолбца).Value= Строка(Выборка.Свойство);		
				    Лист.Cells(НомерСтроки,НомерСтолбца + 1).Value= Строка(Выборка.ЗначениеСвойства);
				    НомерСтолбца = НомерСтолбца + 2;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	ДиалогСФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Если ДиалогСФ.Выбрать() Тогда
		ПутьКФайлу = 
			ДиалогСФ.Каталог+"\Прайс для сайта "+
			СтрЗаменить(СтрЗаменить(ТекущаяДата(),".","_"),":", "_");
		Попытка
			Книга.SaveAs(ПутьКФайлу);
		Исключение
			ПутьКФайлу = 
				ДиалогСФ.Каталог+"\Прайс для сайта "+
				СтрЗаменить(СтрЗаменить(ТекущаяДата(),".","_"),":", "_")+".xls";
			Попытка
				Книга.SaveAs(ПутьКФайлу);
			Исключение
				Сообщить(ОписаниеОшибки()+" Файл не сохранен!");
				Возврат;
			КонецПопытки;
			//Сообщить(ОписаниеОшибки()+" Файл не сохранен!");
			//Возврат;
		КонецПопытки;
	КонецЕсли;
	Эксель.Quit();
КонецПроцедуры

Процедура ЗаполнитьОстаток(Кнопка)
	
	Если НЕ добКСуществующим Тогда

	КаталогИзображений = "C:\";
 	КаталогИзображенийВыбран = ЛОЖЬ;
 	ОбъектПреобразованияКартинки = Неопределено;
 	ОбъектПреобразованияКартинкиСоздан = Ложь;
 	КаталогУменьшенныхИзображенийСоздан = Ложь;
 	МожноВыгружатьУменьшенные = Ложь;
 	ПутьККаталогуУменьшенных = "";
	НомерПослДобавленного=0;
	КонецЕсли;
	
	Если выгрИзображения И НЕ добКСуществующим Тогда
		ДиалогВК = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
		Если ДиалогВК.Выбрать() Тогда
			КаталогИзображений = ДиалогВК.Каталог;
			ПутьКаталогаИзображений = ДиалогВК.Каталог;
			КаталогИзображенийВыбран = ИСТИНА;
			
			ФайлыПредВыгрузки = НайтиФайлы(ПутьКаталогаИзображений, 
				"*.*", ИСТИНА);

			Для каждого ФайлПред Из ФайлыПредВыгрузки Цикл
					
				Попытка
					УдалитьФайлы(ФайлПред.ПолноеИмя, "");
					Сообщить("Удален файл "+ФайлПред.ПолноеИмя);
				Исключение
					Сообщить("Неудачное удаление файла "+ФайлПред.ПолноеИмя+"!");  
				КонецПопытки;

			КонецЦикла;
			
			Попытка
				СоздатьКаталог(ПутьКаталогаИзображений+"\resized");
				КаталогУменьшенныхИзображенийСоздан = Истина;
				ПутьККаталогуУменьшенных = ПутьКаталогаИзображений+"\resized";
			Исключение   
				Сообщить("Неудачное создание каталога "+ПутьКаталогаИзображений+"\resized!");
			КонецПопытки;
			
			Попытка
				ОбъектПреобразованияКартинки= Новый COMОбъект("GFLAx.GFLAx");
				Если НЕ ОбъектПреобразованияКартинки=Неопределено Тогда
					ОбъектПреобразованияКартинкиСоздан = Истина;
				Иначе
					Сообщить("Неудачное создание объекта преобразования изображений!");
				КонецЕсли;
			Исключение
				Сообщить("Неудачное создание объекта преобразования изображений!");
			КонецПопытки;
			
		Иначе
			выгрИзображения = ЛОЖЬ;
		КонецЕсли;	
	КонецЕсли;
	
	МожноВыгружатьУменьшенные = КаталогУменьшенныхИзображенийСоздан И 
		ОбъектПреобразованияКартинкиСоздан;
	
	Если (Товары.Количество() > 0)  И НЕ добКСуществующим Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Товары.Очистить();
	КонецЕсли;
	
	Ошибка = "";
	Если ЭлементыФормы.Опт.Значение = Ложь И ЭлементыФормы.Розница.Значение = Ложь И ЭлементыФормы.НТТ.Значение = Ложь  Тогда
		Ошибка = Ошибка + "Выберите хотя бы один вид склада!";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТипЦен)  Тогда
		Ошибка = Ошибка + " Выберите Тип цен номенклатуры!";
	КонецЕсли;
	Если НЕ Ошибка = "" Тогда
		Вопрос(Ошибка, РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата" , ДатаРасчетов);
	Запрос.УстановитьПараметр("Склад" , Склад);
	Запрос.УстановитьПараметр("Организация" , Организация);
	
	ТекстЗапроса = "                                   
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладах.Номенклатура  КАК Номенклатура,
	|   ТоварыНаСкладах.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,  
	|	СУММА(  ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0.00)
	|	" + ?(ЭлементыФормы.Резерв.Значение = Истина,"- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0.00)","") + "
	|	" + ?(ЭлементыФормы.Передача.Значение = Истина,"- ЕСТЬNULL(ТоварыКПередачеСоСкладов.КоличествоОстаток, 0.00)","") + "
	|	)                                                           КАК КоличествоСвободныйОстаток
	|	" + ?(ЗначениеЗаполнено(Организация),", СУММА(ЕСТЬNULL(ОстаткиОрганизации.КоличествоОстаток, 0.00)) КАК КоличествоОстатокОрганизации","") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбщиеОстатки.Номенклатура               КАК Номенклатура,
	|		ОбщиеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(ОбщиеОстатки.КоличествоОстаток)   КАК КоличествоОстаток
	|	ИЗ
	|		(
		|ВЫБРАТЬ    
		|	";
		                   
		ЕстьНачалоЗапроса = Ложь; //для проверки необходимости перед блоком запроса использовать "ОБЪЕДИНИТЬ ВСЕ"
		Если ЭлементыФормы.Опт.Значение = Истина Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	ТаблицаОстатков.Номенклатура               КАК Номенклатура,
			|	ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ТаблицаОстатков.КоличествоОстаток		   КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата) КАК ТаблицаОстатков 
			|	" + ?(ЗначениеЗаполнено(Склад),"ГДЕ ТаблицаОстатков.Склад = &Склад","") + "
			|	";
			ЕстьНачалоЗапроса = Истина;
		КонецЕсли;
		
		Если ЭлементыФормы.Розница.Значение = Истина Тогда
			Если ЕстьНачалоЗапроса = Истина Тогда
				ТекстЗапроса = ТекстЗапроса +"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
	            |	";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +"
			|	ТаблицаОстатков.Номенклатура               КАК Номенклатура,
			|	ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ТаблицаОстатков.КоличествоОстаток		   КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыВРознице.Остатки(&Дата) КАК ТаблицаОстатков
			|	" + ?(ЗначениеЗаполнено(Склад),"ГДЕ ТаблицаОстатков.Склад = &Склад","") + "
			|	";
			ЕстьНачалоЗапроса = Истина;
		КонецЕсли;
		
		Если ЕстьНачалоЗапроса = Истина Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +"
		|	ТаблицаОстатков.Номенклатура               КАК Номенклатура,
		|	ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	0		   КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, Организация = &Организация) КАК ТаблицаОстатков
		|	" + ?(ЗначениеЗаполнено(Организация),"ГДЕ ТаблицаОстатков.Организация = &Организация","") + "
		|	";
		
		Если ЭлементыФормы.НТТ.Значение = Истина Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ТаблицаОстатков.Номенклатура               КАК Номенклатура,
			|	ТаблицаОстатков.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	ТаблицаОстатков.КоличествоОстаток		   КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыВНТТ.Остатки(&Дата) КАК ТаблицаОстатков
			|	" + ?(ЗначениеЗаполнено(Склад),"ГДЕ ТаблицаОстатков.Склад = &Склад","") + "
			|	";
		КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +"
	|		) КАК ОбщиеОстатки
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОбщиеОстатки.Номенклатура, ОбщиеОстатки.ХарактеристикаНоменклатуры
	|	) КАК ТоварыНаСкладах
	|	";
	
	Если ЭлементыФормы.Резерв.Значение = Истина Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата " + ?(ЗначениеЗаполнено(Склад),", Склад = &Склад ","")+  " ) КАК ТоварыВРезервеНаСкладах
		|ПО
		|	ТоварыВРезервеНаСкладах.Номенклатура = ТоварыНаСкладах.Номенклатура
		|	И ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
		|	";
	КонецЕсли;
	
	Если ЭлементыФормы.Передача.Значение = Истина Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&Дата, Склад = &Склад) КАК ТоварыКПередачеСоСкладов
		|ПО
		|	ТоварыКПередачеСоСкладов.Номенклатура = ТоварыНаСкладах.Номенклатура
		|	И ТоварыКПередачеСоСкладов.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
		|	";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата " + ?(ЗначениеЗаполнено(Организация),", Организация = &Организация","") + " ) КАК ОстаткиОрганизации
		|ПО
		|	ОстаткиОрганизации.Номенклатура = ТоварыНаСкладах.Номенклатура
		|	И ОстаткиОрганизации.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
		|	";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И ЭлементыФормы.Резерв.Значение = Истина Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|ГДЕ
		|	ТоварыВРезервеНаСкладах.ДокументРезерва.Организация = &Организация
		|	";
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса +"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура,
	|   ТоварыНаСкладах.ХарактеристикаНоменклатуры  
	|";
	Запрос.Текст = ТекстЗапроса;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	СчетчикЗаполнения = 1;
	Сообщить("Получена выборка - "+Выборка.Количество()+" товаров.");
	ТекущийНомерТовара = 1;
	Пока Выборка.Следующий() Цикл
		Сообщить("Обрабатываю позицию "+ТекущийНомерТовара+" "+Выборка.Номенклатура);
		//Если ТекущийНомерТовара>2539 Тогда
		//	Прервать;
		//КонецЕсли;
		ТекущийНомерТовара = ТекущийНомерТовара + 1;
		СтрокаТабличнойЧасти = Товары.Добавить();
		Если ЗначениеЗаполнено(Организация)Тогда КоличествоОрганизации = Выборка.КоличествоОстатокОрганизации КонецЕсли;
		Если ЗначениеЗаполнено(Организация) И ЭлементыФормы.Резерв.Значение = Истина Тогда
						ЗапросРезервОрганизации = Новый Запрос;
			ЗапросРезервОрганизации.УстановитьПараметр("Дата", ДатаРасчетов);
			ЗапросРезервОрганизации.УстановитьПараметр("Организация", Организация);
			ЗапросРезервОрганизации.УстановитьПараметр("Склад", Склад);
			ЗапросРезервОрганизации.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
			ЗапросРезервОрганизации.УстановитьПараметр("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
			ЗапросРезервОрганизации.Текст = "
			|ВЫБРАТЬ
			|	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток    КАК КоличествоВРезерве
		    |ИЗ
			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата) КАК ТоварыВРезервеНаСкладахОстатки
			|ГДЕ
			|	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва.Организация = &Организация
			|	" + ?(ЗначениеЗаполнено(Склад),"И ТоварыВРезервеНаСкладахОстатки.Склад = &Склад","")+  "
			|	И ТоварыВРезервеНаСкладахОстатки.Номенклатура = &Номенклатура
			|	И ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
			|
			|";
			ВРезерве = ЗапросРезервОрганизации.Выполнить().Выбрать();    
			Пока ВРезерве.Следующий() Цикл
				КоличествоОрганизации =  КоличествоОрганизации - ВРезерве.КоличествоВРезерве;
			КонецЦикла;		
		КонецЕсли;

		СтрокаТабличнойЧасти.Номенклатура     			= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= Выборка.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.ВидНоменклатуры  			= Выборка.Номенклатура.ВидНоменклатуры;
		СтрокаТабличнойЧасти.Артикул          			= Выборка.Номенклатура.Артикул;
		СтрокаТабличнойЧасти.Количество       			= Выборка.КоличествоСвободныйОстаток;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа  		= Выборка.Номенклатура.НоменклатурнаяГруппа;
		СтрокаТабличнойЧасти.Родитель         			= Выборка.Номенклатура.Родитель;
		СтрокаТабличнойЧасти.ТипНоменклатуры  			= Выборка.Номенклатура.ВидНоменклатуры.ТипНоменклатуры;
		СтрокаТабличнойЧасти.ИДПродукта					= Строка(Выборка.Номенклатура.УникальныйИдентификатор());
		СтрокаТабличнойЧасти.Комментарий				= Выборка.Номенклатура.Комментарий;
		
		СтрокаТабличнойЧасти.ФайлИзображенияПуть = "---";
		Если выгрИзображения И КаталогИзображенийВыбран Тогда
			Если НЕ (Выборка.Номенклатура.ОсновноеИзображение=Неопределено)	Тогда
				Если НЕ (Выборка.Номенклатура.ОсновноеИзображение=
					Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка()) Тогда
					Попытка
						ДвоичныеДанные = Выборка.Номенклатура.
							ОсновноеИзображение.Хранилище.Получить();
						ПутьКФайлуИзображения = КаталогИзображений+"\prod_full_img_"+
							СтрокаТабличнойЧасти.ИДПродукта+".jpg";	
						ДвоичныеДанные.Записать(ПутьКФайлуИзображения);
						СтрокаТабличнойЧасти.ФайлИзображенияПуть = 
							"prod_full_img_"+СтрокаТабличнойЧасти.ИДПродукта+".jpg";
						Сообщить("Выгружено изображение "+
							СтрокаТабличнойЧасти.ФайлИзображенияПуть);	
						Если МожноВыгружатьУменьшенные Тогда
							Попытка
								ОбъектПреобразованияКартинки.
									LoadBitmap(ПутьКФайлуИзображения);
								Ширина=ОбъектПреобразованияКартинки.Width;
								Высота=ОбъектПреобразованияКартинки.Height;
								Если Ширина>90 Тогда
   									ОбъектПреобразованияКартинки.Resize(90,Цел(Высота*(90/Ширина)));
								КонецЕсли;
								ОбъектПреобразованияКартинки.SaveBitmap(ПутьККаталогуУменьшенных+
									"\rsz90x90"+СтрокаТабличнойЧасти.ФайлИзображенияПуть);
								Сообщить("Выгружено уменьшенное изображение "+
									"rsz90x90"+СтрокаТабличнойЧасти.ФайлИзображенияПуть);	
							Исключение
								Сообщить ("Неудачная операция с уменьшенным изображением, файл "+
								"rsz90x90"+СтрокаТабличнойЧасти.ФайлИзображенияПуть+", товар - "+
									СтрокаТабличнойЧасти.Номенклатура);
							КонецПопытки;
						КонецЕсли;		
					Исключение
						СтрокаТабличнойЧасти.ФайлИзображенияПуть = "";	
						Сообщить ("Неудачная запись изображения в файл, товар - "+
							СтрокаТабличнойЧасти.Номенклатура);	
					КонецПопытки;
				Иначе
					Сообщить ("Не найдено изображения, товар - "+
							СтрокаТабличнойЧасти.Номенклатура);
				КонецЕсли;
			Иначе
				Сообщить ("Не найдено изображения, товар - "+
					СтрокаТабличнойЧасти.Номенклатура);			
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (Выборка.Номенклатура.Родитель=Неопределено) Тогда
			Если НЕ (Выборка.Номенклатура.Родитель=Справочники.Номенклатура.ПустаяСсылка()) Тогда
				СтрокаТабличнойЧасти.ИДГруппы			= Строка(Выборка.Номенклатура.Родитель.УникальныйИдентификатор());
			Иначе
				СтрокаТабличнойЧасти.ИДГруппы = "{0000}";
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.ИДГруппы = "{0000}";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Если КоличествоОрганизации < Выборка.КоличествоСвободныйОстаток Тогда
				СтрокаТабличнойЧасти.Количество       = КоличествоОрганизации;
			КонецЕсли;
        КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры   = Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		СчетчикЗаполнения = СчетчикЗаполнения + 1;
		Если обрезатьВыборку И ТекущийНомерТовара>длинаОбрезки Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Сообщить("Извлекаю цены...");
	НомерПослДобВрем = ТекущийНомерТовара-1;
	
	//Товары.Сортировать("Номенклатура Возр");
	
	ТекущийНомерТовара = 1;
	Для каждого Стр Из Товары Цикл
		Сообщить("Обрабатываю позицию "+ТекущийНомерТовара+" "+Стр.Номенклатура);
		
		Если НЕ добКСуществующим ИЛИ (ТекущийНомерТовара>НомерПослДобавленного) Тогда
		ЗапросЦен = Новый Запрос;
		ЗапросЦен.УстановитьПараметр("ТипЦен", ТипЦен);
		ЗапросЦен.УстановитьПараметр("Дата", ДатаРасчетов);
		ЗапросЦен.УстановитьПараметр("Номенклатура", Стр.Номенклатура);
		ЗапросЦен.УстановитьПараметр("ХарактеристикаНоменклатуры", Стр.ХарактеристикаНоменклатуры);
		ЗапросЦен.УстановитьПараметр("ЕдиницаИзмерения", Стр.ЕдиницаИзмерения);

		ЗапросЦен.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
		|	И ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура     
		|	И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|	И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = &ЕдиницаИзмерения   ";
		ВыборкаЦен = ЗапросЦен.Выполнить().Выбрать();
		Пока ВыборкаЦен.Следующий() Цикл
			Стр.Цена = ВыборкаЦен.Цена;
		КонецЦикла;
		Иначе
		  Сообщить("Пропускаю ранее обработанную позицию "+ТекущийНомерТовара+" "+Стр.Номенклатура);
	  КонецЕсли;
	  
	  ТекущийНомерТовара = ТекущийНомерТовара + 1;
	  Если обрезатьВыборку И ТекущийНомерТовара>длинаОбрезки Тогда
			Прервать;
	  КонецЕсли;
  	КонецЦикла;
    добКСуществующим = ЛОЖЬ;
	НомерПослДобавленного = НомерПослДобавленного+НомерПослДобВрем;
КонецПроцедуры

Функция ВыполнитьЗапросSQL(ТекстЗапроса, Connection)
	Сообщить("Запрос: "+ТекстЗапроса);
	Command = Новый COMОбъект("ADODB.Command");
    Command.ActiveConnection = Connection;
    Command.CommandText = ТекстЗапроса;
    Command.CommandType = 1;
    RecordSet = Новый COMОбъект("ADODB.RecordSet");
    Попытка
        #Если Клиент Тогда          
            Состояние ("Выполняем запрос...");        
        #КонецЕсли          
        RecordSet = Command.Execute();    
    Исключение
        #Если Клиент Тогда          
            Сообщить("Запрос не выполнен! "+ОписаниеОшибки());      
		#КонецЕсли
		
		Попытка
			RecordSet.Close();
		Исключение          
       		Сообщить("Ошибка закрытия набора данных!");
			Возврат Неопределено;
		КонецПопытки;
		
        Возврат Неопределено; 
    КонецПопытки;
    
    Count = RecordSet.Fields.Count;
    ТЗ = Новый ТаблицаЗначений;
    Для сч=1 По Count Цикл
        Name = RecordSet.Fields(сч-1).Name;
        ТЗ.Колонки.Добавить(Name);        
    КонецЦикла;
    
    НомерСтроки = 1;
	Попытка
    	Пока RecordSet.EOF=0 Цикл
        	НовСтр = ТЗ.Добавить();           
        	Для сч=1 По Count Цикл
            	НовСтр[сч-1]  = RecordSet.Fields(сч-1).Value;                  
        	КонецЦикла;        
        	RecordSet.MoveNext();
		КонецЦикла;
	Исключение
	    Сообщить("Пустой набор данных!");
		Возврат ТЗ;
	КонецПопытки;

    #Если Клиент Тогда          
        Состояние ("");        
    #КонецЕсли      
    
	
	Попытка
		RecordSet.Close();
	Исключение          
       	Сообщить("Ошибка закрытия набора данных!");      
	КонецПопытки;
	
    Возврат ТЗ;
КонецФункции

Функция УстановитьFTPСоединение(УдалКаталог)
	FTPСоед = Неопределено;
	Для КоличествоПопыток=1 По 3 Цикл
		
		Попытка
			FTPСоед = Новый FTPСоединение(FTPСервер, FTPПорт, 
				FTPЛогин, FTPПароль, , Ложь, );
			Если НЕ (FTPСоед = Неопределено) Тогда
				Прервать;
			КонецЕсли;
		Исключение
			FTPСоед = Неопределено;	
			Сообщить("Неудачная установка FTP-соединения в активном режиме!");		
		КонецПопытки;
		
		Попытка
			FTPСоед = Новый FTPСоединение(FTPСервер, FTPПорт, 
				FTPЛогин, FTPПароль, , Истина, );
			Если НЕ (FTPСоед = Неопределено) Тогда
				Прервать;
			КонецЕсли;
		Исключение
			FTPСоед = Неопределено;	
			Сообщить("Неудачная установка FTP-соединения в активном режиме!");		
		КонецПопытки;
		
	КонецЦикла;
	
	Попытка 
		FTPСоед.УстановитьТекущийКаталог(УдалКаталог);
	Исключение
		FTPСоед = Неопределено;	
		Сообщить("Неудачная установка текущего каталога FTP-соединения!");
	КонецПопытки;
	
	Если НЕ (FTPСоед = Неопределено) Тогда
		Сообщить("FTP-соединение установлено! "+FTPСоед.Сервер+" "+
			FTPСоед.Порт+" "+FTPСоед.Пользователь+" "+
			FTPСоед.ТекущийКаталог());
	КонецЕсли;
	
	Возврат FTPСоед;
КонецФункции

Процедура ВыгрузкаФайловИзображенийПоFTP() 
	
	FTPИзображенияНаСайте = 
		УстановитьFTPСоединение(FTPПутьКПапкеИзображений);
	Если НЕ (FTPИзображенияНаСайте=Неопределено) Тогда
		Для Каждого Стр Из Товары Цикл
			Если НЕ (Стр.ФайлИзображенияПуть=Неопределено) Тогда
				Если НЕ ((Стр.ФайлИзображенияПуть="") ИЛИ 
					(Стр.ФайлИзображенияПуть="---")) Тогда
					
					    ПутьКЛокФайлу = ПутьКаталогаИзображений + 
								"\" +Стр.ФайлИзображенияПуть;
						ЛокФайлы = НайтиФайлы(ПутьКаталогаИзображений, 
							Стр.ФайлИзображенияПуть, ЛОЖЬ);
						Если ЛокФайлы.Количество()>0 Тогда
							Попытка	
		    					FTPИзображенияНаСайте.Записать(
									ПутьКЛокФайлу, Стр.ФайлИзображенияПуть);
								Сообщить("Успешно выгружен файл "+
									ПутьКЛокФайлу+".");
							Исключение
								Сообщить("Неудачная выгрузка файла "+
									ПутьКЛокФайлу+", повторное соединение!");
								FTPИзображенияНаСайте = 
									УстановитьFTPСоединение(FTPПутьКПапкеИзображений);
								Если (FTPИзображенияНаСайте=Неопределено) Тогда
									Сообщить("Неудачная попытка "+
										"повторного соединения!");
									Прервать;
                                КонецЕсли;
							КонецПопытки;
						Иначе
							Сообщить("Не найден локальный файл для выгрузки "+
								ПутьКЛокФайлу);	
						КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
	Попытка 
		FTPИзображенияНаСайте.УстановитьТекущийКаталог(FTPПутьКПапкеИзображений+"/resized");
	Исключение
		FTPИзображенияНаСайте = Неопределено;	
		Сообщить("Неудачная установка текущего каталога FTP-соединения!");
	КонецПопытки;
	
	Если FTPИзображенияНаСайте=Неопределено Тогда
		FTPИзображенияНаСайте = 
			УстановитьFTPСоединение(FTPПутьКПапкеИзображений+"/resized");
	КонецЕсли;
	
	Если НЕ (FTPИзображенияНаСайте=Неопределено) Тогда
		Для Каждого Стр Из Товары Цикл
			Если НЕ (Стр.ФайлИзображенияПуть=Неопределено) Тогда
				Если НЕ ((Стр.ФайлИзображенияПуть="") ИЛИ 
					(Стр.ФайлИзображенияПуть="---")) Тогда
					
					    ПутьКЛокФайлу = ПутьКаталогаИзображений + 
								"\resized\rsz90x90" +Стр.ФайлИзображенияПуть;
						ЛокФайлы = НайтиФайлы(ПутьКаталогаИзображений+"\resized", 
							"rsz90x90"+Стр.ФайлИзображенияПуть, ЛОЖЬ);
						Если ЛокФайлы.Количество()>0 Тогда
							Попытка	
		    					FTPИзображенияНаСайте.Записать(
									ПутьКЛокФайлу, "rsz90x90"+Стр.ФайлИзображенияПуть);
								Сообщить("Успешно выгружен файл "+
									ПутьКЛокФайлу+".");
							Исключение
								Сообщить("Неудачная выгрузка файла "+
									ПутьКЛокФайлу+", повторное соединение!");
								FTPИзображенияНаСайте = 
									УстановитьFTPСоединение(FTPПутьКПапкеИзображений+"/resized");
								Если (FTPИзображенияНаСайте=Неопределено) Тогда
									Сообщить("Неудачная попытка "+
										"повторного соединения!");
									Прервать;
                                КонецЕсли;
							КонецПопытки;
						Иначе
							Сообщить("Не найден локальный файл для выгрузки "+
								ПутьКЛокФайлу);	
						КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыгрузкаНаСайт(Кнопка)
	// Вставить содержимое обработчика.
	Connection = Новый COMОбъект("ADODB.Connection");
    //ConnectString = "driver={MySQL ODBC 5.1 Driver};server="+server+";uid="+user+";pwd="+passwd+";database="+database; 
    ConnectString = "Provider=MSDASQL.1;Persist Security Info=False;Data Source=MySQLVM";
    //"Provider=MSDASQL.1;Extended Properties="DRIVER={MySQL ODBC 5.1 Driver};UID=root;PWD=123456qwerty;server=Server02;database=mt_exchange;"" 
    //Если НЕ Тип(Connection)=Тип("COMобъект") Тогда              
        Попытка
            #Если Клиент Тогда 
                Состояние ("Подключаемся к MySQL...");
            #КонецЕсли  
            Connection.open(ConnectString); 
			Состояние ("Подключился к MySQL...");
			Сообщить ("Подключился к MySQL...");
        Исключение
            #Если Клиент Тогда 
                Сообщить("Не подключились! "+ОписаниеОшибки());
            #КонецЕсли  
            Возврат;
        КонецПопытки; 
    //КонецЕсли;
	
	ВыполнитьЗапросSQL("ALTER TABLE `jos_vm_category` ADD `ext_id` VARCHAR( 256 );", Connection);
	ВыполнитьЗапросSQL("ALTER TABLE `jos_vm_category` ADD `added_or_updated` INT(11) DEFAULT 0;", Connection);
	ВыполнитьЗапросSQL("ALTER TABLE `jos_vm_product` ADD `ext_id` VARCHAR( 256 );", Connection);
	ВыполнитьЗапросSQL("ALTER TABLE `jos_vm_product` ADD `added_or_updated` INT(11) DEFAULT 0;", Connection);
	ВыполнитьЗапросSQL("UPDATE `jos_vm_category` SET `added_or_updated`=0;", Connection);
	ВыполнитьЗапросSQL("DELETE FROM `jos_vm_category_xref`;", Connection);
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ГруппыНоменклатурыЗапрос = Новый Запрос;
	ГруппыНоменклатурыЗапрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование,
		|	Номенклатура.Родитель КАК ГруппаРодитель
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа = &ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Родитель,
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование";

	ГруппыНоменклатурыЗапрос.УстановитьПараметр("ИСТИНА", ИСТИНА);

	ГруппыНоменклатурыРезультат = ГруппыНоменклатурыЗапрос.Выполнить();

	ГруппыНоменклатурыВыборкаДетальныеЗаписи = ГруппыНоменклатурыРезультат.Выбрать();

	СвязкиГруппТЗ = Новый ТаблицаЗначений;
	СвязкиГруппТЗ.Колонки.Добавить("ИДГруппы");
	СвязкиГруппТЗ.Колонки.Добавить("ИДРодГруппы");
	
	Пока ГруппыНоменклатурыВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИдентификаторГруппыНом = 
			Строка(ГруппыНоменклатурыВыборкаДетальныеЗаписи.
			Ссылка.УникальныйИдентификатор());
		НаименованиеГруппыНом = 
			ГруппыНоменклатурыВыборкаДетальныеЗаписи.
			Наименование;
			ИдентификаторРодГруппы = "{0000}";
			
		Если НЕ (ГруппыНоменклатурыВыборкаДетальныеЗаписи.ГруппаРодитель = 
			Неопределено) И НЕ (ГруппыНоменклатурыВыборкаДетальныеЗаписи.
				ГруппаРодитель = Справочники.Номенклатура.ПустаяСсылка()) Тогда
				ИдентификаторРодГруппы = 
					Строка(ГруппыНоменклатурыВыборкаДетальныеЗаписи.
					ГруппаРодитель.УникальныйИдентификатор());
		КонецЕсли;
				
		СвязкаГрупп = СвязкиГруппТЗ.Добавить();
		СвязкаГрупп["ИДГруппы"] = ИдентификаторГруппыНом;
		СвязкаГрупп["ИДРодГруппы"] = ИдентификаторРодГруппы;
			
		ПрисутствиеКатегорииВМагазинеТЗ = ВыполнитьЗапросSQL(
				"SELECT category_id
				|FROM jos_vm_category WHERE ext_id='"+ИдентификаторГруппыНом+"'",
				Connection);
				
		Если ПрисутствиеКатегорииВМагазинеТЗ=Неопределено Тогда
			#Если Клиент Тогда 
                Сообщить("Неудачное определение 
					|присутствия группы в БД магазина! Группа - "+НаименованиеГруппыНом);
            #КонецЕсли	
		Иначе			
			Если ПрисутствиеКатегорииВМагазинеТЗ.Количество()=0 Тогда		
				РезультатДобавленияКатегорииТЗ = ВыполнитьЗапросSQL(
					"insert into jos_vm_category (
					|vendor_id , category_name , ext_id,
					|category_publish , category_browsepage ,
					|products_per_row , category_flypage,
					| list_order, added_or_updated) values ('1' , 
					|'"+СтрЗаменить(НаименованиеГруппыНом,"'","\'")+
					"' ,'"+ИдентификаторГруппыНом+
					"', 'Y', 'managed' , '3' , 'flypage.tpl', '1', 1)", Connection);
			ИначеЕсли ПрисутствиеКатегорииВМагазинеТЗ.Количество()>1 Тогда
				#Если Клиент Тогда 
                Сообщить("Более одной группы с одним id 1С 
					| группы в БД магазина, все они будут удалены, 
					|затем проведите обновление заново! Группа - "+НаименованиеГруппыНом);
				ВыполнитьЗапросSQL(
					"DELETE FROM jos_vm_category 
					| WHERE ext_id='"+ИдентификаторГруппыНом+
					"'", Connection);	
				#КонецЕсли	
			Иначе
				//или в WHERE можно использовать для скорости category_id
				РезультатОбновленияКатегорииТЗ = ВыполнитьЗапросSQL(
					"UPDATE jos_vm_category 
					| SET category_name=
					|'"+СтрЗаменить(НаименованиеГруппыНом,"'","\'")+
					"' , added_or_updated=1 WHERE ext_id='"+ИдентификаторГруппыНом+
					"'", Connection);	
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;
	
	Для НомСвязки=0 По СвязкиГруппТЗ.Количество()-1 Цикл
		ТекСвязка = СвязкиГруппТЗ.Получить(НомСвязки);
		ПрисутствиеКатегорииВМагазинеТЗ = ВыполнитьЗапросSQL(
			"SELECT category_id
			|FROM jos_vm_category WHERE ext_id='"+ТекСвязка.ИДГруппы+"'",
			Connection);
		Если ПрисутствиеКатегорииВМагазинеТЗ=Неопределено Тогда
			#Если Клиент Тогда 
                Сообщить("Неудачное определение 
					|присутствия группы в БД магазина! Группа - "+ТекСвязка.ИДГруппы);
            #КонецЕсли	
		Иначе 
			Если ПрисутствиеКатегорииВМагазинеТЗ.Количество()=1 Тогда
				Если ТекСвязка.ИДРодГруппы = "{0000}" Тогда
					РезультатДобавленияСвязкиТЗ = ВыполнитьЗапросSQL(
						"insert into jos_vm_category_xref ( `category_parent_id` , 
						|`category_child_id` )
						| values ( '0' , '"+
						Формат(ПрисутствиеКатегорииВМагазинеТЗ.Получить(0).category_id,"ЧГ=0")+
						"' )", Connection);
				Иначе
					ИДКатегории = ПрисутствиеКатегорииВМагазинеТЗ.Получить(0).category_id;
					ПрисутствиеКатегорииВМагазинеТЗ = ВыполнитьЗапросSQL(
						"SELECT category_id
						|FROM jos_vm_category WHERE ext_id='"+ТекСвязка.ИДРодГруппы+"'",
						Connection);
					Если ПрисутствиеКатегорииВМагазинеТЗ=Неопределено Тогда
						#Если Клиент Тогда 
                			Сообщить("Неудачное определение 
								|присутствия родительской группы в БД магазина! Группа - "+
								ТекСвязка.ИДРодГруппы);
            			#КонецЕсли	
					Иначе
						Если ПрисутствиеКатегорииВМагазинеТЗ.Количество()=1 Тогда
							РезультатДобавленияСвязкиТЗ = ВыполнитьЗапросSQL(
								"insert into jos_vm_category_xref ( `category_parent_id` , 
									|`category_child_id` )
									| values ( '"+
									Формат(ПрисутствиеКатегорииВМагазинеТЗ.
									Получить(0).category_id,"ЧГ=0")+"' , '"+
									Формат(ИДКатегории,"ЧГ=0")+
									"' )", Connection);

						ИначеЕсли ПрисутствиеКатегорииВМагазинеТЗ.Количество()>1 Тогда
							#Если Клиент Тогда 
                				Сообщить("Более одной родительской группы с одним id 1С 
									| группы в БД магазина, все они будут удалены, 
									|затем проведите обновление заново! Группа - "+ТекСвязка.ИДРодГруппы);
								ВыполнитьЗапросSQL(
									"DELETE FROM jos_vm_category 
									| WHERE ext_id='"+ТекСвязка.ИДРодГруппы+
									"'", Connection);	
							#КонецЕсли		
						Иначе
							Сообщить("Не найдена информация для связки! 
								| Родительская группа - "+ТекСвязка.ИДРодГруппы);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ПрисутствиеКатегорииВМагазинеТЗ.Количество()>1 Тогда
				#Если Клиент Тогда 
                Сообщить("Более одной группы с одним id 1С 
					| группы в БД магазина, все они будут удалены, 
					|затем проведите обновление заново! Группа - "+ТекСвязка.ИДГруппы);
				ВыполнитьЗапросSQL(
					"DELETE FROM jos_vm_category 
					| WHERE ext_id='"+ТекСвязка.ИДГруппы+
					"'", Connection);	
				#КонецЕсли	
			Иначе
				Сообщить("Не найдена информация для связки! 
					| Группа - "+ТекСвязка.ИДГруппы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	ВыполнитьЗапросSQL("DELETE FROM `jos_vm_category` WHERE `added_or_updated`=0;", Connection);
	ВыполнитьЗапросSQL("UPDATE `jos_vm_category` SET `added_or_updated`=0;", Connection);
	
	ВыполнитьЗапросSQL("UPDATE `jos_vm_product` SET `added_or_updated`=0;", Connection);
	ВыполнитьЗапросSQL("DELETE FROM `jos_vm_product_category_xref`;", Connection);
	ВыполнитьЗапросSQL("DELETE FROM `jos_vm_product_price`;", Connection);
	
	АртикулСгенерированный = 10000;
	Для Каждого Стр Из Товары Цикл
		Если НЕ (Стр.Количество = 0 Или Стр.Цена = 0) Тогда
			
			ПрисутствиеТовараВМагазинеТЗ = ВыполнитьЗапросSQL(
				"SELECT product_id, product_full_image, product_thumb_image 
				| FROM jos_vm_product WHERE ext_id='"+Стр.ИДПродукта+"'",
				Connection);
			Если ПрисутствиеТовараВМагазинеТЗ=Неопределено Тогда
					#Если Клиент Тогда 
                		Сообщить("Неудачное определение 
							|присутствия продукта в БД магазина для связки! Товар - "+
							Стр.Номенклатура+", ID - "+Стр.ИДПродукта);
            		#КонецЕсли	
			Иначе
			Если (ПрисутствиеТовараВМагазинеТЗ.Количество()=1) ИЛИ 
					(ПрисутствиеТовараВМагазинеТЗ.Количество()=0) Тогда	
					
					
			ТоварОпределен = ЛОЖЬ;
			ФайлИзображенияКрупный = "";
			ФайлИзображенияМалый = "";
			Если НЕ (Стр.ФайлИзображенияПуть=Неопределено) Тогда
				Если НЕ ((Стр.ФайлИзображенияПуть="---") ИЛИ 
					(Стр.ФайлИзображенияПуть="") ) Тогда
					ФайлИзображенияКрупный = Стр.ФайлИзображенияПуть;
					ФайлИзображенияМалый = "resized/rsz90x90"+ФайлИзображенияКрупный;
				КонецЕсли;
			КонецЕсли;
			ОписаниеТовара = "Товар на magazinu.net";
			Если НЕ (Стр.Комментарий=Неопределено) Тогда
				Если НЕ (Стр.Комментарий="") Тогда
					ОписаниеТовара = СтрЗаменить(Стр.Комментарий,"'","\'");
				КонецЕсли;
			КонецЕсли;
			Если ПрисутствиеТовараВМагазинеТЗ.Количество()=1 Тогда
				ТоварОпределен = ИСТИНА;
				ИДТовара = ПрисутствиеТовараВМагазинеТЗ.Получить(0).product_id;
				ПрежнийРисунокТовара = ПрисутствиеТовараВМагазинеТЗ.
					Получить(0).product_full_image;
				ПрежнийМалыйРисунокТовара = ПрисутствиеТовараВМагазинеТЗ.
					Получить(0).product_thumb_image;
				Если НЕ (ПрежнийРисунокТовара=Неопределено) Тогда
					Если НЕ (ПрежнийРисунокТовара="") Тогда
						Если (ФайлИзображенияКрупный = "") Тогда
						   ФайлИзображенияКрупный = ПрежнийРисунокТовара;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
				Если НЕ (ПрежнийМалыйРисунокТовара=Неопределено) Тогда
					Если НЕ (ПрежнийМалыйРисунокТовара="") Тогда
						Если (ФайлИзображенияМалый = "") Тогда
						   ФайлИзображенияМалый = ПрежнийМалыйРисунокТовара;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
				ВыполнитьЗапросSQL("UPDATE jos_vm_product SET  
					| product_name='"+СтрЗаменить(Стр.Номенклатура,"'","\'")+ 
					"', product_unit='"+Стр.ЕдиницаИзмерения+"', added_or_updated=1,
					| product_sku='"+Формат(АртикулСгенерированный,"ЧГ=0")+"', 
					| product_full_image='"+ФайлИзображенияКрупный+"', "+
					"product_thumb_image='"+ФайлИзображенияМалый+"', product_s_desc='"+
					ОписаниеТовара+"', product_desc='"+ОписаниеТовара+"'  WHERE ext_id='"+
					Стр.ИДПродукта+"'", Connection);
			Иначе
				ВыполнитьЗапросSQL("insert into jos_vm_product ( vendor_id , product_parent_id , 
					|product_sku , product_s_desc , product_desc,  product_publish , 
					|product_special , product_discount_id , product_name , 
					|product_unit , quantity_options, product_order_levels, 
					|product_in_stock, product_sales, product_url,
					|product_full_image, product_thumb_image, added_or_updated, ext_id )
					|values ( '1', '0', '"+Формат(АртикулСгенерированный,"ЧГ=0")+"',"+ 
					"'"+ОписаниеТовара+"', '"+ОписаниеТовара+"', 
					|'Y', 'N', '0', '"+СтрЗаменить(Стр.Номенклатура,"'","\'")+ 
					"','"+Стр.ЕдиницаИзмерения+"', 'none,0,0,1', '0,0','','0','','"+
					ФайлИзображенияКрупный+"','"+ФайлИзображенияМалый+"','1','"+
					Стр.ИДПродукта+"')", Connection);
				ПрисутствиеТовараВМагазинеТЗ = ВыполнитьЗапросSQL(
					"SELECT product_id
					|FROM jos_vm_product WHERE ext_id='"+Стр.ИДПродукта+"'",
					Connection);
				Если ПрисутствиеТовараВМагазинеТЗ=Неопределено Тогда
					#Если Клиент Тогда 
                		Сообщить("Неудачное определение 
							|присутствия только добавленного продукта 
							|в БД магазина для связки! Товар - "+
							Стр.Номенклатура+", ID - "+Стр.ИДПродукта);
            		#КонецЕсли	
				ИначеЕсли ПрисутствиеТовараВМагазинеТЗ.Количество()=1 Тогда
					ТоварОпределен = ИСТИНА;
					ИДТовара = ПрисутствиеТовараВМагазинеТЗ.Получить(0).product_id;	
				ИначеЕсли ПрисутствиеТовараВМагазинеТЗ.Количество()>1 Тогда
					#Если Клиент Тогда 
                		Сообщить("Более одного товара с одним id 1С 
							|, все они будут удалены, 
							|затем проведите обновление заново! Только добавленный товар - "+
							Стр.Номенклатура+", ID - "+Стр.ИДПродукта);
						ВыполнитьЗапросSQL(
							"DELETE FROM jos_vm_product 
							| WHERE ext_id='"+Стр.ИДПродукта+
							"'", Connection);	
					#КонецЕсли
				Иначе	
					Сообщить("Не найден товар! 
						| Товар - "+Стр.Номенклатура+", ID - "+Стр.ИДПродукта);
				КонецЕсли;
			КонецЕсли;
			Если ТоварОпределен Тогда
				
			ВыполнитьЗапросSQL(
							"INSERT INTO `jos_vm_product_price` (`product_id`, `product_price`,
							| `product_currency`, `product_price_vdate`, `product_price_edate`, 
							| `cdate`, `mdate`, `shopper_group_id`, `price_quantity_start`, 
							| `price_quantity_end`) VALUES ('"+Формат(ИДТовара,"ЧГ=0")+"','"+
							СтрЗаменить(Формат(Стр.Цена,"ЧГ=0"),",",".")+"','RUB',0,0,0,0,5,0,0);" 
							, Connection);	
				
			Если Стр.ИДГруппы = "{0000}" Тогда
			   Сообщить("Товар не привязан к группе! 
							| Товар - "+Стр.Номенклатура+", ID - "+Стр.ИДПродукта);		
			Иначе
				ПрисутствиеКатегорииВМагазинеТЗ = ВыполнитьЗапросSQL(
				"SELECT category_id
				|FROM jos_vm_category WHERE ext_id='"+Стр.ИДГруппы+"'",
				Connection);
				Если ПрисутствиеКатегорииВМагазинеТЗ=Неопределено Тогда
					#Если Клиент Тогда 
                		Сообщить("Неудачное определение 
							|присутствия группы продукта в БД магазина для связки! Группа - "+Стр.ИДГруппы);
            		#КонецЕсли	
				Иначе 
					Если ПрисутствиеКатегорииВМагазинеТЗ.Количество()=1 Тогда
						ВыполнитьЗапросSQL("insert into jos_vm_product_category_xref 
							|(category_id , product_id ) values ( '"+
							Формат(ПрисутствиеКатегорииВМагазинеТЗ.Получить(0).category_id,"ЧГ=0")+
							"' , '"+Формат(ИДТовара,"ЧГ=0")+"' );", Connection);
					ИначеЕсли ПрисутствиеКатегорииВМагазинеТЗ.Количество()>1 Тогда
						#Если Клиент Тогда 
                			Сообщить("Более одной группы с одним id 1С 
								| группы товара в БД магазина, все они будут удалены, 
								|затем проведите обновление заново! Группа - "+Стр.ИДГруппы);
							ВыполнитьЗапросSQL(
								"DELETE FROM jos_vm_category 
								| WHERE ext_id='"+Стр.ИДГруппы+
								"'", Connection);	
						#КонецЕсли	
					Иначе
						Сообщить("Не найдена информация для связки товара с группой! 
							| Группа - "+Стр.ИДГруппы);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			КонецЕсли;
				
				
			ИначеЕсли ПрисутствиеТовараВМагазинеТЗ.Количество()>1 Тогда
				#Если Клиент Тогда 
                	Сообщить("Более одного товара с одним id 1С 
						|, все они будут удалены, 
						|затем проведите обновление заново! Товар - "+
						Стр.Номенклатура+", ID - "+Стр.ИДПродукта);
					ВыполнитьЗапросSQL(
						"DELETE FROM jos_vm_product 
						| WHERE ext_id='"+Стр.ИДПродукта+
						"'", Connection);	
				#КонецЕсли
			Иначе	
				//Сообщить("Не найден товар! 
				//			| Товар - "+Стр.Номенклатура+", ID - "+Стр.ИДПродукта);
			КонецЕсли;
			КонецЕсли;
		Иначе
			Сообщить("Нет цены или количества!"); 
		КонецЕсли;
	АртикулСгенерированный = АртикулСгенерированный + 1;	
	КонецЦикла;
	
	ВыполнитьЗапросSQL("DELETE FROM `jos_vm_product` WHERE `added_or_updated`=0;", Connection);
	ВыполнитьЗапросSQL("UPDATE `jos_vm_product` SET `added_or_updated`=0;", Connection);
	
	Если выгрИзображения Тогда
		Сообщить("Начинаю выгружать изображения!");
		ВыгрузкаФайловИзображенийПоFTP();
	Иначе
		Сообщить("Не установлен признак выгрузки изображений!");
	КонецЕсли;	
	
	//ТЗ = ВыполнитьЗапросSQL("select * from jos_vm_product", Connection);
	//Если ТЗ=Неопределено Тогда
	//Иначе
	//	Сообщить ("Категорий - "+ТЗ.Количество());
	//КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыОтдВыгрИзображений(Кнопка)
	// Вставить содержимое обработчика.
	Если выгрИзображения Тогда
		Сообщить("Начинаю выгружать изображения!");
		ВыгрузкаФайловИзображенийПоFTP();
	Иначе
		Сообщить("Не установлен признак выгрузки изображений!");
	КонецЕсли;
КонецПроцедуры
